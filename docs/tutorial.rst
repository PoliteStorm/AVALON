
Fungal Rosetta Stone Tutorial
=============================

This notebook demonstrates the end-to-end workflow for analyzing multi-modal fungal communication data using the `FungalRosettaStone` toolkit. We will load the analyzer, generate synthetic data for three modalities, and produce the final summary visualization.

1. Import Necessary Libraries
-----------------------------

First, we need to import the `FungalRosettaStone` class and other necessary libraries like `Path`.

.. code-block:: python

   import sys
   from pathlib import Path

   # Add the project root to the Python path to allow importing the module
   project_root = Path().absolute().parent
   if str(project_root) not in sys.path:
       sys.path.insert(0, str(project_root))

   from fungal_rosetta_stone import FungalRosettaStone, _demo

2. Run the Demonstration
------------------------

The `_demo()` function provides a complete, self-contained example of the analysis pipeline. It initializes the analyzer with the standard configuration, creates synthetic datasets for the electrochemical, acoustic, and spatial modalities, runs the full analysis, and generates all outputs.

The final output is a multi-panel plot summarizing the discovered semantic patterns and their statistical significance.

.. code-block:: python

    # The _demo function prints status updates and displays the final plot
    _demo()

3. Understanding the Output
---------------------------

The plot generated by the demo showcases the key findings of the analysis:

- **(A) Semantic Pattern Strengths**: This bar chart shows the strength of discovered high-level patterns, such as `electro_acoustic_coupling`. The strength is based on the distance correlation, a robust non-linear metric.
- **(B) Cross-modal Correlations**: This heatmap visualizes the pairwise correlations between the three modalities (Electrical, Acoustic, and Spatial).
- **(C) W-transform Signature**: This shows the W-transform magnitude for the electrical signal, highlighting the dominant time-scale (Ï„) and frequency (k) components.
- **(D) Pattern Validation**: This chart displays the statistical significance (FDR-corrected p-values) for the discovered patterns, with a reference line for the chosen significance level. 

Fungal Language Analysis Tutorial
============================

This tutorial demonstrates how to use the Fungal Rosetta Stone package to analyze electrical activity patterns in fungi.

Installation
-----------

Install the package using pip::

    pip install fungal-rosetta-stone

Basic Usage
----------

Here's a simple example of analyzing fungal electrical activity::

    from fungal_rosetta_stone import FungalRosettaStone
    import numpy as np

    # Initialize analyzer
    analyzer = FungalRosettaStone()

    # Load your voltage data
    time = np.array([...])  # Time points
    voltage = np.array([...])  # Voltage measurements
    species = "C_militaris"  # Species name

    # Detect spikes
    spikes = analyzer.detect_spikes(time, voltage, species)

Enhanced Features
---------------

Hierarchical Word Analysis
~~~~~~~~~~~~~~~~~~~~~~~~~

The package now includes a sophisticated hierarchical word analysis system that examines patterns at five distinct temporal scales::

    # Perform hierarchical analysis
    results = analyzer.analyze_hierarchical_words(spikes['spike_times'], species)

    # Access results at different levels
    micro_patterns = results['levels']['micro']
    meso_patterns = results['levels']['meso']
    macro_patterns = results['levels']['macro']
    super_patterns = results['levels']['super']
    ultra_patterns = results['levels']['ultra']

    # Examine cross-level relationships
    cross_level = results['cross_level_analysis']
    hierarchy_strength = cross_level['hierarchy_strength']

The hierarchical levels are:

* Micro (1-second window): Captures rapid spike sequences
* Meso (5-second window): Short communication patterns
* Macro (30-second window): Medium-term signaling
* Super (5-minute window): Long-term patterns
* Ultra (30-minute window): Extended communication sequences

Improved Pattern Strength Analysis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The pattern strength calculation now includes comprehensive statistical validation::

    # Calculate pattern strength with confidence intervals
    strength_results = analyzer.calculate_pattern_strength(patterns, total_duration)

    print(f"Overall strength: {strength_results['overall_strength']:.2f}")
    print(f"Confidence interval: {strength_results['confidence_interval']}")
    print(f"Statistical significance: p={strength_results['statistical_significance']['p_value']:.3f}")

Enhanced Spike Detection
~~~~~~~~~~~~~~~~~~~~

Species-specific spike detection has been improved with optimized parameters::

    # C. militaris (improved sensitivity)
    spikes_cm = analyzer.detect_spikes(time, voltage, "C_militaris")

    # F. velutipes (better spike count)
    spikes_fv = analyzer.detect_spikes(time, voltage, "F_velutipes")

    # S. commune (optimized for small amplitudes)
    spikes_sc = analyzer.detect_spikes(time, voltage, "S_commune")

Advanced Noise Handling
~~~~~~~~~~~~~~~~~~~

The package includes enhanced noise handling and baseline correction::

    # Noise filtering is automatically applied during spike detection
    # You can also access it directly:
    filtered_voltage = analyzer._filter_voltage(voltage)

Configuration
------------

The package uses a YAML configuration file for research parameters. Here's an example::

    voltage_params:
      sampling_rate: 1000  # Hz
      noise_threshold: 0.003

    spike_detection:
      C_militaris:
        threshold: 0.02
        window_size: 35
        min_distance: 30
      F_velutipes:
        threshold: 0.015
        window_size: 40
        min_distance: 35

    pattern_params:
      min_pattern_length: 3
      max_pattern_length: 20
      confidence_threshold: 0.8

Advanced Usage
------------

Cross-Channel Analysis
~~~~~~~~~~~~~~~~~~

For multi-channel recordings::

    # Process multiple voltage channels
    channels = [voltage1, voltage2, voltage3]
    results = analyzer.process_multichannel_data(time, channels, species)

    # Access cross-channel correlations
    correlations = results['cross_channel_correlations']

Pattern Validation
~~~~~~~~~~~~~~~

Statistical validation of detected patterns::

    # Validate patterns with significance testing
    validated_patterns = []
    for pattern in patterns:
        if pattern['statistical_significance']['p_value'] < 0.05:
            validated_patterns.append(pattern)

Contributing
-----------

We welcome contributions! Please see our contribution guidelines for more information.

References
---------

1. Adamatzky, A. (2022). Language of fungi derived from their electrical spiking activity. Royal Society Open Science, 9(11), 211926.
2. [Additional references...] 